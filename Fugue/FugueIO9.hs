--FugueIO4.hs
--Ivan Pyzow ipyzow@gmail.com

module Main where

import FugueGen9
import Haskore

main :: IO ()
main = mainP prohibitedIntervals

--A menu page. The argument is the prohibited intervals.  If a user decides to change the prohibited intervals, then the program is run again with the new prohibited intervals as an argument.  
mainP :: [Int] -> IO ()
mainP pI = do
    putStrLn $ show allChordsNames 
    putStrLn "\nWhat would you like to create?\nf - fugue\nm - mashup\nr - fractal\nh - please explain\nd - display prohibited intervals\nc - change prohibited intervals\nq - quit"
    input <- getLine
    pickProgram pI input

pickProgram :: [Int] -> String -> IO ()
pickProgram pI string = 
    case string of
        "f" -> runFugue pI
        "m" -> runMashup pI
        "r" -> runFractal pI
        "h" -> runHelp pI
        "c" -> runChangeP
        "d" -> runDisplayP pI
        "q" -> runExit
        _   -> mainP pI

-----------------------------------------------        
--THE AUXILIARY FUNCTIONS----------------------
-----------------------------------------------

--this exits the program
runExit :: IO ()
runExit = putStrLn "Goodbye!"

--this explains the program
runHelp :: [Int] -> IO ()
runHelp pI = do 
    putStrLn "\nFor this program, you can enter melodies of eighth notes, separated by spaces.  The appropriate note names are: \nc db d eb e f gb g ab a bb b\n and r to indicate a rest.\nYou can add a '2' after each note to represent that note up an octave.  In this way, you can enter a melody that spans two octaves, starting on a C. The term 'fugue' is used loosely to describe a set of variations of a melody played at the same time."
    mainP pI

--this function displays the current prohibited intervals
runDisplayP :: [Int] -> IO ()
runDisplayP pI = do 
    putStrLn $ "\n" ++ show pI   
    mainP pI

--this function allows the user to change the prohibited intervals
runChangeP :: IO ()
runChangeP = do
    putStrLn "Please enter the intervals that you would like to be prohibited from occurring in subsequent fugues and mashups generated by this program. You should enter these intervals as integers from 0 to 11, which represent the number of half-steps in a given interval, separated by spaces.  For example, you might enter '1 2 6' which would prohibit half-steps, whole-steps, and dimished fifths."
    input <- getLine
    let pI = map read (words input) :: [Int]
    mainP pI
    

-------------------------------------------------
--THE MUSIC PROGRAMS-----------------------------
-------------------------------------------------

runFugue :: [Int] -> IO ()
runFugue pI = do
    putStrLn "Please enter either '2' or '3' to request a two-part or three-part fugue."
    dOF <- getLine 
    putStrLn "Please enter a melody to be fugued."
    input2 <- getLine
    
    --separates input into a list of strings by spaces, then checks validity.
    let notes = words input2
    if checkNotes notes == True
        then do
                putStrLn "What is this melody called?"
                input2A <-getLine
                --this converts the input into notes and creates the fugue
                let h = sfugue dOF pI $ map str2note notes
                
                --this displays them, with numbering included
                putStrLn $ show $ fugueDisplay h

                --this turns the notes into melodies, and serializes them
                let g = back2back $ map (convert4 (0.05 {-the tempo-})) h
                let ourMidiFile = testMidi g

                --this names the midi file according to the given melody
                outputMidiFile ("F_" ++ input2A ++ ".mid") ourMidiFile
                putStrLn "Sucess! Here are the fugues. A fugue midi file has been created in this directory as well."
                mainP pI
        
    else do
            putStrLn "Sorry! Something about that melody wasn't entered correctly. Let's try again."
            runFugue pI
          
  
runMashup :: [Int] -> IO ()
runMashup pI = do 
    putStrLn "Please enter the first melody to be mashed."
    input3 <- getLine
    let notes3 = words input3
    if checkNotes notes3 == True 
        then do
            putStrLn "What is this first melody called?"
            input3A <- getLine      
            putStrLn "Please enter the second melody to be mashed."
            input4 <- getLine
            let notes4 = words input4
            if checkNotes notes4 == True
                then do
                    putStrLn "What is this second melody called?"
                    input4A <- getLine 
                    let melody1 = map str2note $ notes3
                    let melody2 = map str2note $ notes4
                    let h = mashup pI melody1 melody2
                    putStrLn $ show $ fugueDisplay h
                    let g = back2back $ map (convert4 (0.07 {-the tempo-})) h
                    let ourMidiFile = testMidi g
                    outputMidiFile ("M_" ++ input3A ++ "_" ++ input4A ++ ".mid") ourMidiFile
                    putStrLn "Sucess! Here are the mashups. A mashup midi file has been created in this directory as well."
                    mainP pI
            else tryAgainMashup pI
        else tryAgainMashup pI


runFractal :: [Int] -> IO ()
runFractal pI = do 
    putStrLn "Please enter a melody to be fractalled."
    input5 <- getLine
    let notes5 = words input5
    if checkNotes notes5 == True
        then do
            putStrLn "Please enter the degree of fractalization as an integer."
            input6 <- getLine
            if checkDigits input6 == True
                then do
                    let g = fractal (read input6) $ map str2note $ notes5
                    putStrLn $ show g 
                    let h = playfractal (0.04) g
                    let ourMidiFile = testMidi h
                    outputMidiFile ("R_" ++ (filter (/=' ') input5) ++ "_" ++ input6 ++ ".mid") ourMidiFile
                    putStrLn "Sucess! Here is the fractal. A fractal midi file has been created in this directory as well."
                    mainP pI
            else tryAgainFractal pI
    else tryAgainFractal pI


-----------------------------------
--IF SOMETHING GOES WRONG..........
-----------------------------------

tryAgainMashup :: [Int] -> IO ()
tryAgainMashup pI = do
    putStrLn "Sorry! Something about that melody wasn't entered correctly. Let's try again."
    runMashup pI

tryAgainFractal :: [Int] -> IO ()
tryAgainFractal pI = do 
    putStrLn "Sorry! Something about that wasn't entered correctly. Let's try again."
    runFractal pI

